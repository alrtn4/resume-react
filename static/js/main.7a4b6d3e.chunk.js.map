{"version":3,"sources":["components/FullPage.js","components/DownIcon.js","sections/TitleSection.js","sections/AboutSection.js","components/Card.js","components/ScrollElement.jsx","sections/SkillsSection.js","components/ScrollLink.jsx","components/Nav.jsx","App.js","serviceWorker.js","index.js"],"names":["FullPage","children","this","props","className","style","color","backgroundColor","Component","DownIcon","display","flexDirection","alignItems","justifyContent","marginBottom","transform","src","icon","alt","maxWidth","TitleSection","data","title","subtitle","Object","keys","links","map","key","url","roundness","iconSize","size","to","spy","smooth","duration","icons","down","id","AboutSection","sections","items","item","content","Card","image","fontSize","ScrollElement","Scroll","ref","el","parentBindings","domNode","SkillsSection","ScrollLink","num","Nav","onClick","index","setState","colorsbackgrounds","background","changeTheme","App","state","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a4b6d3e.chunk.js","sourcesContent":["import React , { Component } from 'react';\r\n\r\nimport './FullPage.css' ;\r\n\r\nclass FullPage extends Component {\r\n    render() {\r\n        const {children} = this.props \r\n        return (\r\n            <div className={`fullpage ${this.props.className || ''}`}\r\n                style={{color: this.props.color , backgroundColor: this.props.backgroundColor}}\r\n            >\r\n                {children} \r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default FullPage\r\n","import React from \"react\";\r\n\r\nconst DownIcon = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        marginBottom: \"-40px\",\r\n        transform: \"translateY(-40px)\",\r\n      }}\r\n    >\r\n      <div>\r\n        <img\r\n          src={props.icon}\r\n          alt=\"\"\r\n          style={{\r\n            maxWidth: \"35px\",\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DownIcon;\r\n","import React, { Component } from \"react\";\r\nimport { Link, Element } from \"react-scroll\";\r\nimport { SocialMediaIconsReact } from \"social-media-icons-react\";\r\n\r\nimport \"./TitleSection.css\";\r\nimport data from \"../data.json\";\r\nimport FullPage from \"../components/FullPage\";\r\nimport DownIcon from \"../components/DownIcon\";\r\n\r\nclass TitleSection extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FullPage\r\n          className=\"first\"\r\n          color={this.props.color}\r\n          backgroundColor={this.props.backgroundColor}\r\n        >\r\n          <div className=\"container\">\r\n            <h1>{data.title}</h1>\r\n            <div>\r\n              <h2>{data.subtitle}</h2>\r\n            </div>\r\n            <div>\r\n              {Object.keys(data.links).map((key) => {\r\n                return (\r\n                  <div className=\"social-container\">\r\n                    <SocialMediaIconsReact\r\n                      icon={key}\r\n                      url={data.links[key]}\r\n                      roundness={50}\r\n                      iconSize={5}\r\n                      size={50}\r\n                    />\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </FullPage>\r\n        <Link to=\"About\" spy={true} smooth={true} duration={500}>\r\n          <DownIcon icon={data.icons.down} />\r\n        </Link>\r\n        <Element id=\"About\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TitleSection;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./AboutSection.css\";\r\nimport data from \"../data.json\";\r\nimport FullPage from \"../components/FullPage\";\r\n\r\nclass AboutSection extends Component {\r\n  render() {\r\n    return (\r\n      <FullPage className=\"second\" color={this.props.color} backgroundColor={this.props.backgroundColor}>\r\n        <div className=\"container\">\r\n          <div className=\"wrapper1\">\r\n            <h1>{data.sections[0].title}</h1>\r\n            {data.sections[0].items.map(item => (\r\n              <p>{item.content}</p>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </FullPage>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AboutSection;\r\n","import React, { Component } from \"react\";\r\nimport './Card.css'\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    const { item } = this.props;\r\n    return (\r\n      <div>\r\n        <div className=\"card\">\r\n          <i className={item.content.image} style={{ fontSize: \"6rem\" }}></i>\r\n          <p>{item.content.title}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Scroll from 'react-scroll'\r\n\r\nvar ScrollElement = Scroll.ScrollElement\r\n\r\nconst Element = (props) => {\r\n  return (\r\n    <div\r\n      {...props}\r\n      ref={(el) => {\r\n        props.parentBindings.domNode = el;\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollElement( Element )\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./SkillsSection.css\";\r\nimport FullPage from \"../components/FullPage\";\r\nimport Card from \"../components/Card\";\r\nimport data from \"../data.json\";\r\nimport SkillElement from \"../components/ScrollElement\";\r\n\r\nclass SkillsSection extends Component {\r\n  render() {\r\n    return (\r\n      <FullPage\r\n        className=\"third\"\r\n        color={this.props.color}\r\n        backgroundColor={this.props.backgroundColor}\r\n      >\r\n        <SkillElement />\r\n        <div className=\"container\">\r\n          <h1>{data.sections[1].title}</h1>\r\n          <div className=\"wrapper2\">\r\n            {data.sections[1].items.map((item) => {\r\n              return <Card item={item} />;\r\n            })}\r\n          </div>\r\n        </div>\r\n      </FullPage>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SkillsSection;\r\n","import React from \"react\";\r\nimport Scroll from 'react-scroll'\r\n\r\nvar ScrollLink = Scroll.ScrollLink\r\n\r\nconst Link = (props) => {\r\n  return <a {...props}>{props.children}</a>;\r\n};\r\n\r\nexport default ScrollLink( Link )\r\n","import React, { Component } from \"react\";\r\n\r\nimport Link from \"./ScrollLink\";\r\nimport data from '../data.json'\r\nimport './Nav.css'\r\n\r\nlet num = 0 ;\r\n\r\nclass Nav extends Component {\r\n    render() {\r\n      const changeTheme = (props) => {\r\n      num++;\r\n      let index = num % 3 ;\r\n      props.setState({color : data.colorsbackgrounds[index].color})\r\n      props.setState({backgroundColor: data.colorsbackgrounds[index].background})\r\n    }\r\n    return (\r\n      <div>\r\n        <ul className=\"nav-list\">\r\n          <li>\r\n            {\r\n              <Link className=\"link\" id=\"first-item\" to=\"About\" spy={true} smooth={true} duration={500}>\r\n                About\r\n              </Link>\r\n            }\r\n          </li>\r\n          <li>\r\n            {\r\n              <Link className=\"link\" spy={true} smooth={true} duration={500}>\r\n                Skills\r\n              </Link>\r\n            }\r\n          </li>\r\n          <li \r\n            className=\"link\" \r\n            id='last-item' \r\n            onClick={() => changeTheme(this.props)}\r\n          >\r\n            Theme\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport TitleSection from \"./sections/TitleSection\";\nimport AboutSection from \"./sections/AboutSection\";\nimport SkillsSection from \"./sections/SkillsSection\";\nimport Nav from \"./components/Nav\";\nimport SnowStorm from 'react-snowstorm';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"MediumBlue\",\n      backgroundColor: \"AliceBlue\",\n    };\n    this.setState = this.setState.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SnowStorm />\n        <Nav setState={this.setState} state={this.state} />\n        <TitleSection\n          color={this.state.color}\n          backgroundColor={this.state.backgroundColor}\n        />\n        <AboutSection\n          color={this.state.color}\n          backgroundColor={this.state.backgroundColor}\n        />\n        <SkillsSection\n          color={this.state.color}\n          backgroundColor={this.state.backgroundColor}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}